{"title":"RNN (12주차)","markdown":{"yaml":{"title":"RNN (12주차)","author":"SEOYEON CHOI","date":"2022-11-30","categories":["Special Topics in Machine Learning","순환신경망"]},"headingText":"imports","containsRefs":false,"markdown":"\n\n> 순환신경망 minor topics\n\n\n# Define some funtions\n\n# 순환신경망 표현력 비교실험 (1)\n\n## data: abcabC\n\n## 실험\n\n`-` 실험1\n\n`-` 실험2\n\n`-` 실험3\n\n## 결론\n\n`-` 노드수가 많으면 학습에 유리함 \n\n(서연 필기) c/C를 맞추는 것(error)보다 확실한 규칙을 맞추는 것(underline)이 중요$\\to$오히려 맞추면 과적합으로 볼 수 있다\n- 그래서 학습이 잘 되었으면 \n    - 첫 칸\n    - 둘째 칸\n    - 셋쨰, 넷째 칸\n    - 이 순으로 predict 되었을 것\n\n# 순환신경망 표현력 비교실험 (2)\n\n## data: ab(c,C)\n\n## 실험\n\n`-` 실험1\n\n`-` 실험2\n\n## 결론\n\n`-` 노드수가 너무 많으면 오버피팅 경향도 있음 \n\n# 문자열에서 단어로\n\n## data: human numbers 5\n\n## torch를 이용한 learn \n\n## fastai 이용한 learn \n\nfastai 를 이용하여 class를 사용하기 위한 목차\n\n# 똑같은 코드들: `torch.nn.LSTM`\n\n## data: hi?hello!!\n\n## 세트1: _water의 생략 \n\n`-` 코드1: 정석코드 \n\n`-` 코드2: _water 는 사실 없어도 괜찮았어.. \n\n999개, 구별되는 문자 7개\n\n## 세트2: x.shape = ($L$, $H_{in}$) or ($L$,$N$,$H_{in}$) \n\n`-` 파라메터 설명 \n\n- $L$ = sequece length = 시계열의 길이 = 간장을 몇 년 전통으로 이어갈지 \n- $N$ = batch size = 전체데이터는 몇 개의 시계열이 있는지 = 전체 데이터를 몇개의 시계열로 쪼갤지 <-- 왜 이걸 해야해? \n- $H_{in}$ = input_size = 시점을 고정하였을 경우 입력자료의 차원 = 입력시계열이 시점별로 몇개의 변수로 나타내어 지는지? = 만약에 원핫인코딩으로 단어를 정리하면 단어수를 의미함 \n\n\n\n우리가 실습했던 거 모두 N이 1이었다 그래서 안 썼음\n- 1일 때만 아래와 같이 여러 버전 가능\n\n`-` 코드2: _water 는 사실 없어도 괜찮았어.. \n\n`-` 코드3: x의 차원은 사실 엄밀하게는 ($L$,$N$,$H_{in}$) 와 같다... \n\n`-` 코드4: `batch_first=True`옵션을 사용하여 lstm을 만든경우 \n\n## 세트3: hidden.shape = ($D\\times$ `num_layers`, $H_{out}$) or ($D\\times$ `num_layers`, $N$, $H_{out}$) \n\n`-` 파라메터 설명 \n\n- $D$ = 2 if bidirectional=True otherwise 1 = 양방향이면 2, 단방향이면 1 (우리는 단방향만 배움) \n- `num_layres` = 중첩된 RNN일 경우 (우리는 중첩을 안시켰음) \n- $N$ = batch size = 전체데이터는 몇 개의 시계열이 있는지 = 전체 데이터를 몇개의 시계열로 쪼갤지 <-- 왜 이걸 해야해? \n- $H_{out}$ = 히든노드의 수\n\n`-` 코드5: x.shape = ($L$,$1$,$H_{in}$) $\\to$ hidden.shape = ($1$,$1$,$H_{out}$)\n\n`-` 사실 _water.shape = (1,$H_{out}$) 에서 1은 observation의 차원을 의미하는게 아님 (그런데 대충 그렇게 생각해도 무방함) \n\n- 한 시점의 콩물에 대하여 양방향으로 간장을 만들면 _water.shape = (2,h) \n- 한 시점의 콩물에 대하여 3중첩으로 간장을 만들면 _water.shape = (3,h) \n- 한 시점의 콩물에 대하여 3중첩간장을 양방향으로 만들면 _water.shape = (6,h) \n\n# 똑같은 코드들: `torch.nn.LSTMCell`\n\n## data: hi?hello!!\n\n## 세트1: _water의 생략 \n\n`-` 코드1: 정석코드 \n\n`-` 코드2: _water의 생략\n\n## 세트2: xt.shape = ($N$,$H_{in}$) or ($H_{in}$)\n\nn: timeserie 개수, 1일 경우 생략 가능\n\n`-` 코드2: _water의 생략\n\n`-` 코드3: \n\n(1,n)의 형태라면 괄호 하나 빼도 가능\n\n## 세트3: hidden.shape = ($N$,$H_{out}$) or ($H_{out}$)\n\n`-` 코드4: xt.shape = ($H_{out}$) $\\to$ _water.shape = $(H_{out})$\n\n# Summary \n\n## 똑같은 코드들 정리 \n\n`-` 원래 1은 단순히 observation의 차원이 아니다. 즉 ${\\bf X}_{n \\times p}$에서 $n$에 대응하는 차원으로 생각할 수 없다. \n\n`-` 그런데 (1) 단방향 (2) 조각내지 않은 시계열 (3) 중첩하지 않은 순환망에 한정하여서는 observation 처럼 생각해도 무방하다. <-- 엄밀하게는 이게 위험한 생각임. 하지만 정식으로 모두 따지려면 너무 헷갈림 \n\n## 실제구현시 기억할 것 \n\n`-` 현실적으로 (1)-(3)이 아닌 조건에서는 Cell 단위로 연산을 이용할 일이 없다. (느리거든요) // 그냥 이해용으로 구현 \n\n`-` torch.nn.RNN 혹은 torch.nn.LSTM 으로 네트워크를 구성할시 _water의 dim을 명시할 일도 없다. \n\n`-` 오로지 고려해야 할 것은 입력시계열을 조각낼지 조각내지 않을지 \n\n# 조각난 시계열로 학습 \n\n시계열이 무조건 연속으로서 데이터가 존재하지 않는다면?\n- 댓글 1의 길이는 400\n- 댓글 2 의 길이는 100 이럴수도\n\n## data \n\n## 조각내지 않은 시계열 \n\n첫번째 stack은 hi!로 학습 두번째 stack은 hi?로 학습하여 결과가 이럼\n\n## 조각난 시계열 \n\n9에서 하나씩 빼서 x,y 만들었으니까 8\n\n첫번째 stzck 과 두번째 stack의 합\n```python\n  loss = loss_fn(output[:,0,:],yy[:,0,:]) + loss_fn(output[:,1,:],yy[:,1,:])\n```\n\nxx로 학습한 것들인데 만약 x를 넣는다면?\n\n`-` 조각난 시계열로 학습한 경우는 hi!에서 hi?로 바뀔 수 없다. 왜냐햐면 그러한 연결정보가 끊어져 있으니까\n\n## 재미있는 실험 \n\n`-` x1만 배운다면? \n\n`-` x2만 배운다면? \n\n# 똑같은 코드들 fastai, pytorch\n\n## data: human numbers 5\n\n## fastai 이용한 learn \n\n```python\ndl1 = torch.utils.data.DataLoader(ds1,batch_size=998)\n```\n한 뭉치에 몇 개 있는지\n\n```python\ntorch.nn.LSTM(batxh_size)\n```\n몇 개로 나눠져 있는지\n\n## torch를 이용한 learn \n\noptim으로 adam 사용\n\n# human numbers 100\n\n`(1)` TextDataLoaders.from_df을 이용하여 dls오브젝트를 만들어라. \n- is_lm = True 로 설정할 것 \n- seq_len = 5 로 설정할 것 \n\n(풀이)\n\n`(2)` lrnr 오브젝트를 만들어라. \n- arch = AWD_LSTM 이용 \n- metrics = accuracy 이용 \n\n(풀이) \n\n`(3)` lrnr오브젝트에서 fine_tune(3) 메소드를 이용하여 모형을 학습하라. \n\n(풀이)\n\n`(4)` 'one , two ,' 이후에 이어질 50개의 단어를 생성하라.\n\n(풀이) \n\n`(5)` 'twenty , twenty one , ' 이후에 이어질 50개의 단어를 생성하라. \n\n(풀이) \n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":false,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"toc":true,"output-file":"2022-11-30-12wk.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.335","theme":"pulse","code-copy":false,"title-block-banner":true,"title":"RNN (12주차)","author":"SEOYEON CHOI","date":"2022-11-30","categories":["Special Topics in Machine Learning","순환신경망"]},"extensions":{"book":{"multiFile":true}}}}}