{"title":"RNN (9주차)","markdown":{"yaml":{"title":"RNN (9주차)","author":"SEOYEON CHOI","date":"2022-11-02","categories":["Special Topics in Machine Learning","순환신경망","embedding layer"]},"headingText":"import","containsRefs":false,"markdown":"\n\n기계학습 특강 (9주차) 11월02일 [순환신경망-- ab예제, embedding layer]\n\n\n## Define some funtions\n\n`-` 활성화함수들 \n\nhyperblic tangent(https://en.wikipedia.org/wiki/Hyperbolic_functions)\n- sigmoid(범위가0 ~ 1)와 차이점(범위가 -1 ~ 1)\n\n`-` 문자열 -> 숫자로 바꾸는 함수\n\n(사용예시1)\n\n(사용예시2)\n\n## Exam1: ab\n\n### data\n\n### 선형모형을 이용한 풀이\n\n#### ***(풀이1) 1개의 파라메터 -- 실패***\n\n`-` 데이터정리 \n\n`-` 학습 및 결과 시각화\n\n- 잘 학습이 안되었다. \n\n`-` 학습이 잘 안된 이유\n\n현재 $\\hat{y}_i = \\hat{w}x_i$ 꼴의 아키텍처이고 $y_i \\approx \\hat{w}x_i$ 가 되는 적당한 $\\hat{w}$를 찾아야 하는 상황 \n- $(x_i,y_i)=(0,1)$ 이면 어떠한 $\\hat{w}$를 선택해도 $y_i \\approx \\hat{w}x_i$를 만드는 것이 불가능  \n- $(x_i,y_i)=(1,0)$ 이면 $\\hat{w}=0$일 경우 $y_i \\approx \\hat{w}x_i$로 만드는 것이 가능 \n\n상황을 종합해보니 $\\hat{w}=0$으로 학습되는 것이 그나마 최선 \n\n0에 무엇을 곱하든 0이 되어서 학습이 안 돼\n\n#### ***(풀이2) 1개의 파라메터 -- 성공, but 확장성이 없는 풀이***\n\n`-` 0이라는 값이 문제가 되므로 인코딩방식의 변경\n\n`-` 결과는 성공\n\n- 딱봐도 클래스가 3개일 경우 확장이 어려워 보인다. \n\n원핫인코딩해줘야 좋은데 그러면 마지막 무조건 softmax 그러면 loss는 BCELoss\n\n### 로지스틱 모형을 이용한 풀이\n\n#### ***(풀이1) 1개의 파라메터 -- 실패***\n\n`-` 데이터를 다시 a=0, b=1로 정리\n\n`-` 학습\n\n`-` 결과\n\n`-` 결과해석: 예상되었던 실패임 \n- 아키텍처는 $\\hat{y}_i = \\text{sig}(\\hat{w}x_i)$ 꼴이다. \n- $(x_i,y_i)=(0,1)$ 이라면 어떠한 $\\hat{w}$을 선택해도 $\\hat{w}x_i=0$ 이다. 이경우 $\\hat{y}_i = \\text{sig}(0) = 0.5$ 가 된다. \n- $(x_i,y_i)=(1,0)$ 이라면 $\\hat{w}=-5$와 같은 값으로 선택하면 $\\text{sig}(-5) \\approx 0 = y_i$ 와 같이 만들 수 있다. \n- 상황을 종합하면 net의 weight는 $\\text{sig}(\\hat{w}x_i) \\approx 0$ 이 되도록 적당한 음수로 학습되는 것이 최선임을 알 수 있다. \n\n#### ***(풀이2) 2개의 파라메터 + 좋은 초기값 -- 성공***\n\n`-` 동일하게 a=0, b=1로 맵핑\n\n`-` 네트워크에서 bias를 넣기로 결정함 \n\n`-` net의 초기값을 설정 (이것은 좋은 초기값임)\n\n`-` 학습전 결과\n\nbias 쓰게 되면서 한쪽을 뭉개주는 효과?\n\n`-` 학습후결과\n\n#### ***(풀이3) 2개의 파라메터 + 나쁜초기값 -- 성공***\n\n`-` a=0, b=1 \n\n`-` 이전과 동일하게 바이어스가 포함된 네트워크 설정 \n\n`-` 초기값설정 (이 초기값은 나쁜 초기값임)\n\n`-` 학습전상태: 반대모양으로 되어있다. \n\n`-` 학습\n\n- 결국 수렴하긴 할듯 \n\n#### ***(풀이4) 3개의 파라메터를 쓴다면?***\n\n`-` a=0, b=1로 코딩 \n\n`-` 3개의 파라메터를 사용하기 위해서 아래와 같은 구조를 생각하자. \n\n```Python\ntorch.nn.Sequential(\n    torch.nn.Linear(in_features=1,out_features=1,bias=True),\n    torch.nn.ACTIVATION_FUNCTION(),\n    torch.nn.Linear(in_features=1,out_features=1,bias=False)\n)\n````\n\n위와 같은 네트워크를 설정하면 3개의 파라메터를 사용할 수 있다. 적절한 ACTIVATION_FUNCTION을 골라야 하는데 실험적으로 tanh가 적절하다고 알려져있다. ($\\to$ 그래서 우리도 실험적으로 이해해보자)\n\n--- \n\n(예비학습1) net(x)와 사실 net.forwardx(x)는 같다. \n\n그래서 net.forward를 재정의하면 net(x)의 기능을 재정의 할 수 있다. \n\n- \"lambda x: 1\" 은 입력이 x 출력이 1인 함수를 의미 (즉 입력값에 상관없이 항상 1을 출력하는 함수) \n- \"net.forward = lambda x:1\" 이라고 새롭게 선언하였므로 앞으론 net.forward(x), net(x) 도 입력값에 상관없이 항상 1을 출력하게 될 것임 \n\n(예비학습2) torch.nn.Module을 상속받아서 네트워크를 만들면 (= \"class XXX(torch.nn.Module):\" 와 같은 방식으로 클래스를 선언하면) 약속된 아키텍처를 가진 네트워크를 찍어내는 함수를 만들 수 있다. \n\n(예시1)\n\n이제 \n```Python\nnet = Mynet1()\n```\n는 아래와 같은 효과를 가진다. \n```Python\nnet = torch.nn.Sequential(\n    torch.nn.Linear(in_features=1,out_features=1,bias=True),\n    torch.nn.Sigmoid(),\n    torch.nn.Linear(in_features=1,out_features=1,bias=False)\n)\n```\n\n(예시2)\n\n이제 \n```Python\nnet = Mynet2()\n```\n는 아래와 같은 효과를 가진다. \n```Python\nnet = torch.nn.Sequential(\n    torch.nn.Linear(in_features=1,out_features=1,bias=True),\n    torch.nn.RuLU(),\n    torch.nn.Linear(in_features=1,out_features=1,bias=False)\n)\n```\n\n(예시3)\n\n이제 \n```Python\nnet = Mynet3()\n```\n는 아래와 같은 효과를 가진다. \n```Python\nnet = torch.nn.Sequential(\n    torch.nn.Linear(in_features=1,out_features=1,bias=True),\n    torch.nn.Tanh(),\n    torch.nn.Linear(in_features=1,out_features=1,bias=False)\n)\n```\n\n***클래스에 대한 이해가 부족한 학생을 위한 암기방법***\n\n**step1:** 아래와 코드를 복사하여 틀을 만든다. (이건 무조건 고정임, XXXX 자리는 원하는 이름을 넣는다) \n\n```Python\nclass XXXX(torch.nn.Module):\n    def __init__(self):\n        super().__init__()\n        ## 우리가 사용할 레이어를 정의 \n        \n        ## 레이어 정의 끝\n    def forward(self,x):\n        ## yhat을 어떻게 구할것인지 정의 \n        \n        ## 정의 끝\n        return yhat\n```\n\n- net(x)에 사용하는 x임, yhat은 net.forward(x) 함수의 리턴값임 \n- 사실, x/yhat은 다른 변수로 써도 무방하나 (예를들면 input/output 이라든지) 설명의 편의상 x와 yhat을 고정한다. \n\n**step2:** `def __init__(self):`에 사용할 레이어를 정의하고 이름을 붙인다. 이름은 항상 `self.xxx` 와 같은 식으로 정의한다. \n\n```Python\nclass XXXX(torch.nn.Module):\n    def __init__(self):\n        super().__init__()\n        ## 우리가 사용할 레이어를 정의 \n        self.xxx1 = torch.nn.Linear(in_features=1,out_features=1,bias=True)\n        self.xxx2 = torch.nn.Tanh()\n        self.xxx3 = torch.nn.Linear(in_features=1,out_features=1,bias=True)\n        ## 레이어 정의 끝\n    def forward(self,x):\n        ## yhat을 어떻게 구할것인지 정의 \n        \n        ## 정의 끝\n        return yhat\n```\n\n**step3:** `def forward:`에 \"x --> yhat\" 으로 가는 과정을 묘사한 코드를 작성하고 yhat을 리턴하도록 한다. \n\n```Python\nclass XXXX(torch.nn.Module):\n    def __init__(self):\n        super().__init__()\n        ## 우리가 사용할 레이어를 정의 \n        self.xxx1 = torch.nn.Linear(in_features=1,out_features=1,bias=True)\n        self.xxx2 = torch.nn.Tanh()\n        self.xxx3 = torch.nn.Linear(in_features=1,out_features=1,bias=True)\n        ## 레이어 정의 끝\n    def forward(self,x):\n        ## yhat을 어떻게 구할것인지 정의 \n        u = self.xxx1(x) \n        v = self.xxx2(u)\n        yhat = self.xxx3(v) \n        ## 정의 끝\n        return yhat\n```\n\n예비학습 끝 \n\n--- \n\n`-` 우리가 하려고 했던 것: 아래의 아키텍처에서 \n```Python\ntorch.nn.Sequential(\n    torch.nn.Linear(in_features=1,out_features=1,bias=True),\n    torch.nn.ACTIVATION_FUNCTION(),\n    torch.nn.Linear(in_features=1,out_features=1,bias=False)\n)\n```\nACTIVATION의 자리에 tanh가 왜 적절한지 직관을 얻어보자. \n\n`-` 실험결과1(Sig): Sigmoid activation을 포함한 아키텍처로 학습시킨 25개의 적합결과\n\n큰 폭 -> 학습 속도가 빠르다\n\n`-` 실험결과2(ReLU): RuLU activation을 포함한 아키텍처로 학습시킨 25개의 적합결과\n\n`-` 실험결과3(Tanh): Tanh activation을 포함한 아키텍처로 학습시킨 25개의 적합결과\n\n`-` 실험해석\n- sig: 주황색선의 변동폭이 작음 + 항상 0.5근처로 머무는 적합값이 존재 \n- relu: 주황색선의 변동폭이 큼 + 항상 0.5근처로 머무는 적합값이 존재 \n- tanh: 주황색선의 변동폭이 큼 + 0.5근처로 머무는 적합값이 존재X\n\n`-` 실험해보니까 tanh가 우수한것 같다. $\\to$ 앞으로는 tanh를 쓰자. \n\n$x \\to wx \\to \\tanh \\to wx \\to sig \\to y$\n- x가 양이면 wx 양수 이런 식으로 y로 가게끔 설정하면 설명의 여지가 존재(?)\n\n(서연 필기)sigmoid하면 0에 머무르는 값 존재해서 0.5에 머무르는 경향, 조금 사용하면 학습 능력이 떨어지기도\n\n### 소프트맥스로 확장\n\n#### (풀이1) 로지스틱모형에서 3개의 파라메터 버전을 그대로 확장 \n\nb,a,b,a,,,...\n\n비슷하게 나왔다, 학습이 잘 되었다(중간 대체과제 참고)\n\n## Embedding Layer\n\n### motive\n\n`-` 결국 최종적으로는 아래와 같은 맵핑방식이 확장성이 있어보인다. \n\n`-` 그런데 매번 $X$를 원핫인코딩하고 Linear 변환하는것이 번거로운데 이를 한번에 구현하는 함수가 있으면 좋겠다. $\\to$ torch.nn.Embedding Layer가 그 역할을 한다. \n\nx dimension은 3(원핫인코딩)\n\n`-` 그런데 사실 언뜻보면 아래의 linr 함수와 역할의 차이가 없어보인다. \n\n`-` 차이점: 파라메터수에 차이가 있다. \n\n파라메터 적게 쓰는게 비용측면에서 좋으니까\n\n결국 ebdd는 아래의 구조에 해당하는 파라메터들이고 \n\n- $\\text{x[:5]}= \\begin{bmatrix} 0 \\\\ 1 \\\\ 2 \\\\ 0 \\\\ 1 \\end{bmatrix} \\Longrightarrow \\begin{bmatrix} 1 & 0 & 0 \\\\ 0 & 1 & 0 \\\\ 0 & 0 & 1 \\\\ 1 & 0 & 0 \\\\ 0 & 1 & 0 \\end{bmatrix} \\quad net(x)= \\begin{bmatrix} 1 & 0 & 0 \\\\ 0 & 1 & 0 \\\\ 0 & 0 & 1 \\\\ 1 & 0 & 0 \\\\ 0 & 1 & 0 \\end{bmatrix}\\begin{bmatrix} -0.8178 \\\\ -0.7052 \\\\ -0.5843 \\end{bmatrix} = \\begin{bmatrix} -0.8178 \\\\ -0.7052 \\\\ -0.5843 \\\\ -0.8178 \\\\ -0.7052  \\end{bmatrix} $\n\nlinr는 아래의 구조에 해당하는 파라메터이다. \n\n- $\\text{x[:5]}= \\begin{bmatrix} 0 \\\\ 1 \\\\ 2 \\\\ 0 \\\\ 1 \\end{bmatrix} \\quad net(x)=  \\begin{bmatrix} 0 \\\\ 1 \\\\ 2 \\\\ 0 \\\\ 1 \\end{bmatrix} \\times (-0.3467) + (-0.8470)=\\begin{bmatrix} -0.8470 \\\\ -1.1937 \\\\ -1.5404 \\\\ -0.8470 \\\\ -1.1937 \\end{bmatrix}$\n\n### 연습 (ab문제 소프트맥스로 확장한 것 다시 풀이)\n\n`-` 맵핑\n\n`-` torch.nn.Embedding 을 넣은 네트워크 \n\nnum_embedding이 2인 이유 a,b만 있어서\n\n`-` 학습\n","srcMarkdownNoYaml":"\n\n기계학습 특강 (9주차) 11월02일 [순환신경망-- ab예제, embedding layer]\n\n## import\n\n## Define some funtions\n\n`-` 활성화함수들 \n\nhyperblic tangent(https://en.wikipedia.org/wiki/Hyperbolic_functions)\n- sigmoid(범위가0 ~ 1)와 차이점(범위가 -1 ~ 1)\n\n`-` 문자열 -> 숫자로 바꾸는 함수\n\n(사용예시1)\n\n(사용예시2)\n\n## Exam1: ab\n\n### data\n\n### 선형모형을 이용한 풀이\n\n#### ***(풀이1) 1개의 파라메터 -- 실패***\n\n`-` 데이터정리 \n\n`-` 학습 및 결과 시각화\n\n- 잘 학습이 안되었다. \n\n`-` 학습이 잘 안된 이유\n\n현재 $\\hat{y}_i = \\hat{w}x_i$ 꼴의 아키텍처이고 $y_i \\approx \\hat{w}x_i$ 가 되는 적당한 $\\hat{w}$를 찾아야 하는 상황 \n- $(x_i,y_i)=(0,1)$ 이면 어떠한 $\\hat{w}$를 선택해도 $y_i \\approx \\hat{w}x_i$를 만드는 것이 불가능  \n- $(x_i,y_i)=(1,0)$ 이면 $\\hat{w}=0$일 경우 $y_i \\approx \\hat{w}x_i$로 만드는 것이 가능 \n\n상황을 종합해보니 $\\hat{w}=0$으로 학습되는 것이 그나마 최선 \n\n0에 무엇을 곱하든 0이 되어서 학습이 안 돼\n\n#### ***(풀이2) 1개의 파라메터 -- 성공, but 확장성이 없는 풀이***\n\n`-` 0이라는 값이 문제가 되므로 인코딩방식의 변경\n\n`-` 결과는 성공\n\n- 딱봐도 클래스가 3개일 경우 확장이 어려워 보인다. \n\n원핫인코딩해줘야 좋은데 그러면 마지막 무조건 softmax 그러면 loss는 BCELoss\n\n### 로지스틱 모형을 이용한 풀이\n\n#### ***(풀이1) 1개의 파라메터 -- 실패***\n\n`-` 데이터를 다시 a=0, b=1로 정리\n\n`-` 학습\n\n`-` 결과\n\n`-` 결과해석: 예상되었던 실패임 \n- 아키텍처는 $\\hat{y}_i = \\text{sig}(\\hat{w}x_i)$ 꼴이다. \n- $(x_i,y_i)=(0,1)$ 이라면 어떠한 $\\hat{w}$을 선택해도 $\\hat{w}x_i=0$ 이다. 이경우 $\\hat{y}_i = \\text{sig}(0) = 0.5$ 가 된다. \n- $(x_i,y_i)=(1,0)$ 이라면 $\\hat{w}=-5$와 같은 값으로 선택하면 $\\text{sig}(-5) \\approx 0 = y_i$ 와 같이 만들 수 있다. \n- 상황을 종합하면 net의 weight는 $\\text{sig}(\\hat{w}x_i) \\approx 0$ 이 되도록 적당한 음수로 학습되는 것이 최선임을 알 수 있다. \n\n#### ***(풀이2) 2개의 파라메터 + 좋은 초기값 -- 성공***\n\n`-` 동일하게 a=0, b=1로 맵핑\n\n`-` 네트워크에서 bias를 넣기로 결정함 \n\n`-` net의 초기값을 설정 (이것은 좋은 초기값임)\n\n`-` 학습전 결과\n\nbias 쓰게 되면서 한쪽을 뭉개주는 효과?\n\n`-` 학습후결과\n\n#### ***(풀이3) 2개의 파라메터 + 나쁜초기값 -- 성공***\n\n`-` a=0, b=1 \n\n`-` 이전과 동일하게 바이어스가 포함된 네트워크 설정 \n\n`-` 초기값설정 (이 초기값은 나쁜 초기값임)\n\n`-` 학습전상태: 반대모양으로 되어있다. \n\n`-` 학습\n\n- 결국 수렴하긴 할듯 \n\n#### ***(풀이4) 3개의 파라메터를 쓴다면?***\n\n`-` a=0, b=1로 코딩 \n\n`-` 3개의 파라메터를 사용하기 위해서 아래와 같은 구조를 생각하자. \n\n```Python\ntorch.nn.Sequential(\n    torch.nn.Linear(in_features=1,out_features=1,bias=True),\n    torch.nn.ACTIVATION_FUNCTION(),\n    torch.nn.Linear(in_features=1,out_features=1,bias=False)\n)\n````\n\n위와 같은 네트워크를 설정하면 3개의 파라메터를 사용할 수 있다. 적절한 ACTIVATION_FUNCTION을 골라야 하는데 실험적으로 tanh가 적절하다고 알려져있다. ($\\to$ 그래서 우리도 실험적으로 이해해보자)\n\n--- \n\n(예비학습1) net(x)와 사실 net.forwardx(x)는 같다. \n\n그래서 net.forward를 재정의하면 net(x)의 기능을 재정의 할 수 있다. \n\n- \"lambda x: 1\" 은 입력이 x 출력이 1인 함수를 의미 (즉 입력값에 상관없이 항상 1을 출력하는 함수) \n- \"net.forward = lambda x:1\" 이라고 새롭게 선언하였므로 앞으론 net.forward(x), net(x) 도 입력값에 상관없이 항상 1을 출력하게 될 것임 \n\n(예비학습2) torch.nn.Module을 상속받아서 네트워크를 만들면 (= \"class XXX(torch.nn.Module):\" 와 같은 방식으로 클래스를 선언하면) 약속된 아키텍처를 가진 네트워크를 찍어내는 함수를 만들 수 있다. \n\n(예시1)\n\n이제 \n```Python\nnet = Mynet1()\n```\n는 아래와 같은 효과를 가진다. \n```Python\nnet = torch.nn.Sequential(\n    torch.nn.Linear(in_features=1,out_features=1,bias=True),\n    torch.nn.Sigmoid(),\n    torch.nn.Linear(in_features=1,out_features=1,bias=False)\n)\n```\n\n(예시2)\n\n이제 \n```Python\nnet = Mynet2()\n```\n는 아래와 같은 효과를 가진다. \n```Python\nnet = torch.nn.Sequential(\n    torch.nn.Linear(in_features=1,out_features=1,bias=True),\n    torch.nn.RuLU(),\n    torch.nn.Linear(in_features=1,out_features=1,bias=False)\n)\n```\n\n(예시3)\n\n이제 \n```Python\nnet = Mynet3()\n```\n는 아래와 같은 효과를 가진다. \n```Python\nnet = torch.nn.Sequential(\n    torch.nn.Linear(in_features=1,out_features=1,bias=True),\n    torch.nn.Tanh(),\n    torch.nn.Linear(in_features=1,out_features=1,bias=False)\n)\n```\n\n***클래스에 대한 이해가 부족한 학생을 위한 암기방법***\n\n**step1:** 아래와 코드를 복사하여 틀을 만든다. (이건 무조건 고정임, XXXX 자리는 원하는 이름을 넣는다) \n\n```Python\nclass XXXX(torch.nn.Module):\n    def __init__(self):\n        super().__init__()\n        ## 우리가 사용할 레이어를 정의 \n        \n        ## 레이어 정의 끝\n    def forward(self,x):\n        ## yhat을 어떻게 구할것인지 정의 \n        \n        ## 정의 끝\n        return yhat\n```\n\n- net(x)에 사용하는 x임, yhat은 net.forward(x) 함수의 리턴값임 \n- 사실, x/yhat은 다른 변수로 써도 무방하나 (예를들면 input/output 이라든지) 설명의 편의상 x와 yhat을 고정한다. \n\n**step2:** `def __init__(self):`에 사용할 레이어를 정의하고 이름을 붙인다. 이름은 항상 `self.xxx` 와 같은 식으로 정의한다. \n\n```Python\nclass XXXX(torch.nn.Module):\n    def __init__(self):\n        super().__init__()\n        ## 우리가 사용할 레이어를 정의 \n        self.xxx1 = torch.nn.Linear(in_features=1,out_features=1,bias=True)\n        self.xxx2 = torch.nn.Tanh()\n        self.xxx3 = torch.nn.Linear(in_features=1,out_features=1,bias=True)\n        ## 레이어 정의 끝\n    def forward(self,x):\n        ## yhat을 어떻게 구할것인지 정의 \n        \n        ## 정의 끝\n        return yhat\n```\n\n**step3:** `def forward:`에 \"x --> yhat\" 으로 가는 과정을 묘사한 코드를 작성하고 yhat을 리턴하도록 한다. \n\n```Python\nclass XXXX(torch.nn.Module):\n    def __init__(self):\n        super().__init__()\n        ## 우리가 사용할 레이어를 정의 \n        self.xxx1 = torch.nn.Linear(in_features=1,out_features=1,bias=True)\n        self.xxx2 = torch.nn.Tanh()\n        self.xxx3 = torch.nn.Linear(in_features=1,out_features=1,bias=True)\n        ## 레이어 정의 끝\n    def forward(self,x):\n        ## yhat을 어떻게 구할것인지 정의 \n        u = self.xxx1(x) \n        v = self.xxx2(u)\n        yhat = self.xxx3(v) \n        ## 정의 끝\n        return yhat\n```\n\n예비학습 끝 \n\n--- \n\n`-` 우리가 하려고 했던 것: 아래의 아키텍처에서 \n```Python\ntorch.nn.Sequential(\n    torch.nn.Linear(in_features=1,out_features=1,bias=True),\n    torch.nn.ACTIVATION_FUNCTION(),\n    torch.nn.Linear(in_features=1,out_features=1,bias=False)\n)\n```\nACTIVATION의 자리에 tanh가 왜 적절한지 직관을 얻어보자. \n\n`-` 실험결과1(Sig): Sigmoid activation을 포함한 아키텍처로 학습시킨 25개의 적합결과\n\n큰 폭 -> 학습 속도가 빠르다\n\n`-` 실험결과2(ReLU): RuLU activation을 포함한 아키텍처로 학습시킨 25개의 적합결과\n\n`-` 실험결과3(Tanh): Tanh activation을 포함한 아키텍처로 학습시킨 25개의 적합결과\n\n`-` 실험해석\n- sig: 주황색선의 변동폭이 작음 + 항상 0.5근처로 머무는 적합값이 존재 \n- relu: 주황색선의 변동폭이 큼 + 항상 0.5근처로 머무는 적합값이 존재 \n- tanh: 주황색선의 변동폭이 큼 + 0.5근처로 머무는 적합값이 존재X\n\n`-` 실험해보니까 tanh가 우수한것 같다. $\\to$ 앞으로는 tanh를 쓰자. \n\n$x \\to wx \\to \\tanh \\to wx \\to sig \\to y$\n- x가 양이면 wx 양수 이런 식으로 y로 가게끔 설정하면 설명의 여지가 존재(?)\n\n(서연 필기)sigmoid하면 0에 머무르는 값 존재해서 0.5에 머무르는 경향, 조금 사용하면 학습 능력이 떨어지기도\n\n### 소프트맥스로 확장\n\n#### (풀이1) 로지스틱모형에서 3개의 파라메터 버전을 그대로 확장 \n\nb,a,b,a,,,...\n\n비슷하게 나왔다, 학습이 잘 되었다(중간 대체과제 참고)\n\n## Embedding Layer\n\n### motive\n\n`-` 결국 최종적으로는 아래와 같은 맵핑방식이 확장성이 있어보인다. \n\n`-` 그런데 매번 $X$를 원핫인코딩하고 Linear 변환하는것이 번거로운데 이를 한번에 구현하는 함수가 있으면 좋겠다. $\\to$ torch.nn.Embedding Layer가 그 역할을 한다. \n\nx dimension은 3(원핫인코딩)\n\n`-` 그런데 사실 언뜻보면 아래의 linr 함수와 역할의 차이가 없어보인다. \n\n`-` 차이점: 파라메터수에 차이가 있다. \n\n파라메터 적게 쓰는게 비용측면에서 좋으니까\n\n결국 ebdd는 아래의 구조에 해당하는 파라메터들이고 \n\n- $\\text{x[:5]}= \\begin{bmatrix} 0 \\\\ 1 \\\\ 2 \\\\ 0 \\\\ 1 \\end{bmatrix} \\Longrightarrow \\begin{bmatrix} 1 & 0 & 0 \\\\ 0 & 1 & 0 \\\\ 0 & 0 & 1 \\\\ 1 & 0 & 0 \\\\ 0 & 1 & 0 \\end{bmatrix} \\quad net(x)= \\begin{bmatrix} 1 & 0 & 0 \\\\ 0 & 1 & 0 \\\\ 0 & 0 & 1 \\\\ 1 & 0 & 0 \\\\ 0 & 1 & 0 \\end{bmatrix}\\begin{bmatrix} -0.8178 \\\\ -0.7052 \\\\ -0.5843 \\end{bmatrix} = \\begin{bmatrix} -0.8178 \\\\ -0.7052 \\\\ -0.5843 \\\\ -0.8178 \\\\ -0.7052  \\end{bmatrix} $\n\nlinr는 아래의 구조에 해당하는 파라메터이다. \n\n- $\\text{x[:5]}= \\begin{bmatrix} 0 \\\\ 1 \\\\ 2 \\\\ 0 \\\\ 1 \\end{bmatrix} \\quad net(x)=  \\begin{bmatrix} 0 \\\\ 1 \\\\ 2 \\\\ 0 \\\\ 1 \\end{bmatrix} \\times (-0.3467) + (-0.8470)=\\begin{bmatrix} -0.8470 \\\\ -1.1937 \\\\ -1.5404 \\\\ -0.8470 \\\\ -1.1937 \\end{bmatrix}$\n\n### 연습 (ab문제 소프트맥스로 확장한 것 다시 풀이)\n\n`-` 맵핑\n\n`-` torch.nn.Embedding 을 넣은 네트워크 \n\nnum_embedding이 2인 이유 a,b만 있어서\n\n`-` 학습\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":false,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"toc":true,"output-file":"2022-11-02-ml_9w.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.315","theme":"pulse","code-copy":false,"title-block-banner":true,"comments":{"utterances":{"repo":"seoyeonc/md"}},"title":"RNN (9주차)","author":"SEOYEON CHOI","date":"2022-11-02","categories":["Special Topics in Machine Learning","순환신경망","embedding layer"]},"extensions":{"book":{"multiFile":true}}},"ipynb":{"identifier":{"display-name":"Jupyter","target-format":"ipynb","base-format":"ipynb"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"png","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"ipynb","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"default-image-extension":"png","to":"ipynb","output-file":"2022-11-02-ml_9w.ipynb"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"title-block-banner":true,"comments":{"utterances":{"repo":"seoyeonc/md"}},"title":"RNN (9주차)","author":"SEOYEON CHOI","date":"2022-11-02","categories":["Special Topics in Machine Learning","순환신경망","embedding layer"]}}},"projectFormats":["html"]}